fn @pick_light_id(rnd: &mut RndState, num_lights: i32) {
    if ?num_lights && num_lights == 1 {
        0
    } else {
        // Note: randi() returns random integers, but we only want positive integers here
        (randi(rnd) & 0x7FFFFFFF) % num_lights
    }
}

// Returns the probability to continue given the contribution of a path
fn @russian_roulette(c: Color, clamp: f32) = clampf(2 * color_luminance(c), 0.05, clamp);

// Russian roulette used in pbrt v4
fn @russian_roulette_pbrt(c: Color, clamp: f32) = clampf(color_max_component(c), 0.05, clamp);

struct PTRayPayload {
    mis:     f32,
    contrib: Color,
    depth:   i32,
    eta:     f32
}

struct Vertex {
    //The current size of one data point is 16 bytes (valid: i32 (0, 1): 0, material: i32: 1, pdfFwd: f32 : 2, pdfRev: f32: 3, pos: vec3 : 4, normal: vec3 : 7, beta: vec3 : 10, wo: vec3 : 13)
    valid:  i32,
    mat:    i32,
    pdfFwd: f32,
    pdfRev: f32,
    pos:    Vec3,
    normal: Vec3,
    beta:   Color,
    wo:     Vec3
}

fn @make_empty_Vertex() -> Vertex{
   Vertex {
       valid =      0,
       mat =        0,
       pdfFwd =     0.0,
       pdfRev =     0.0,
       pos =        make_vec3(0.0, 0.0, 0.0),
       normal =     make_vec3(0.0, 0.0, 0.0),
       beta =       make_color(0.0, 0.0, 0.0, 0.0),
       wo =         make_vec3(0.0, 0.0, 0.0)
   } 
}

fn @load_vertex(buf: DeviceBuffer, bufPos: i32) -> Vertex{
    //The current size of one data point is 16 bytes (valid: i32 (0, 1): 0, material: i32: 1, pdfFwd: f32 : 2, pdfRev: f32: 3, pos: vec3 : 4, normal: vec3 : 7, beta: vec3 : 10, wo: vec3 : 13)
    Vertex {
        valid =     buf.load_i32(bufPos),
        mat =       buf.load_i32(bufPos + 1),
        pdfFwd =    buf.load_f32(bufPos + 2),
        pdfRev =    buf.load_f32(bufPos + 3),
        pos =       buf.load_vec3(bufPos + 4),
        normal =    buf.load_vec3(bufPos + 7),
        beta =      vec3_to_color(buf.load_vec3(bufPos + 10)),
        wo =        buf.load_vec3(bufPos + 13)
    }
}

fn @store_vertex(buf: DeviceBuffer, bufPos: i32, vertex: Vertex){
    buf.store_int2(bufPos, vertex.valid, vertex.mat);
    buf.store_f32(bufPos + 2, vertex.pdfFwd);
    buf.store_f32(bufPos + 3, vertex.pdfRev);
    buf.store_vec3(bufPos + 4, vertex.pos);
    buf.store_vec3(bufPos + 7, vertex.normal);
    buf.store_vec3(bufPos + 10, color_to_vec3(vertex.beta));
    buf.store_vec3(bufPos + 13, vertex.wo);
}


static AOV_PATH_NORMAL = 1;
static AOV_PATH_DIRECT = 2;
static AOV_PATH_NEE    = 3;

fn wrap_ptraypayload(payload: PTRayPayload) -> RayPayload {
    let mut r : RayPayload;
    r.components(0) = payload.mis;
    r.components(1) = payload.contrib.r;
    r.components(2) = payload.contrib.g;
    r.components(3) = payload.contrib.b;
    r.components(4) = payload.depth as f32;
    r.components(5) = payload.eta;
    r
}

fn unwrap_ptraypayload(payload: RayPayload) = PTRayPayload {
    mis     = payload.components(0),
    contrib = make_color(payload.components(1), payload.components(2), payload.components(3), 1),
    depth   = payload.components(4) as i32,
    eta     = payload.components(5),
};

fn @make_path_renderer(max_path_len: i32, num_lights: i32, lights: LightTable, aovs: AOVTable, buf: DeviceBuffer, camera_buf: DeviceBuffer, max_path_len_light: i32) -> Technique {
    let offset : f32  = 0.001;
    let pdf_lightpick = if num_lights == 0 { 1 } else { 1 / (num_lights as f32) };

    let aov_normal = @aovs(AOV_PATH_NORMAL);
    let aov_di     = @aovs(AOV_PATH_DIRECT);
    let aov_nee    = @aovs(AOV_PATH_NEE);

    // let (film_width, film_height) = device.get_film_size();
    // let buf_size = film_width * film_height * 4 * max_path_len * 16;
    // let camera_buf = device.request_buffer("camera_path", buf_size, 0);
    //let aov_stats  = @aovs(AOV_PATH_STATS);
 
    fn pdfLight(current:Vertex, next:Vertex, light : DirectLightSample){
        let unnorm_w = vec3_sub(next.pos, current.pos);
        let dist2 = vec3_dot(unnorm_w, unnorm_w);
        let dist = math_builtins::sqrt(dist2);
        let norm_w = vec3_divf(unnorm_w, dist);
        let dir_pdf = light.pdf_dir(); //this is broken currently
        let pdf = dir_pdf * 1/dist2;
        
        pdf * math_builtins::fabs(vec3_dot(next.normal, norm_w));
    }

    fn pdfConection(current:Vertex, prev:Vertex, next:Vertex, light : Light, isLight: bool, mat: Material){
        // if isLight{
        //     return pdfLight(current, next, light)
        // }
        // let wn = vec3_normalize(vec3_sub())


    }

    fn pdfLightOrigin(current:Vertex, next:Vertex, light : DirectLightSample, choicePDF : f32){
        let w = vec3_normalize(vec3_sub(next.pos, current.pos));
        let pos_pdf = light.pdf_area;
        pos_pdf * choicePDF
    }

    fn MISWeight(camBuf: DeviceBuffer, lightBuf: DeviceBuffer, pixel:i32, s:i32, t:i32, sampled: Vertex, Light : f32){
        let sumRi : f32 = 0.0;
        let startCamBuff = 16 * pixel * max_path_len;
        let startLightBuf = 16 * pixel * max_path_len_light;
        // let current_buf_pos = buf_pos + pt.depth * 16;
        let mut qs = if s > 0 {load_vertex(lightBuf, startLightBuf + 16 * (s-1))} else {make_empty_Vertex()};
        let mut pt = if t > 0 {load_vertex(camBuf, startCamBuff + 16 * (t-1))} else {make_empty_Vertex()};
        let mut qsMinus = if s > 1 {load_vertex(lightBuf, startLightBuf + 16 * (s-2))} else {make_empty_Vertex()};
        let mut ptMinus = if t > 1 {load_vertex(camBuf, startCamBuff + 16 * (t-2))} else {make_empty_Vertex()};

        if s == 1{
            qs = sampled;
        }

        let ri : f32 = 1.0;

        if pt.valid == 1 &&  t - 1 > 1{

        }
        
    }    


    fn @on_shadow( ray: Ray
                 , pixel: i32
                 , _hit: Hit
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , surf: SurfaceElement
                 , mat: Material
                 ) -> ShadowRay {
        
        if num_lights == 0{
            return(ShadowRay::None)
        }

        let pt = unwrap_ptraypayload(payload);

        if pt.depth >= max_path_len {
            return(ShadowRay::None)
        }

        let light_buf_pos  = 16 * pixel * max_path_len_light;
        let camera_buf_pos = 16 * pixel * max_path_len;

        let s = 2;

        if s == 1{
            let light_id      = pick_light_id(rnd, num_lights);
            let light         = @lights(light_id);//sollte eventuel wie im normalen pathtracer angepasst werden!!
            let sample_direct = light.sample_direct;
            let light_sample  = @sample_direct(rnd, surf);
            let light_pdf     = 1 / (num_lights as f32);


            if light.infinite{
                return(ShadowRay::None)
            }else{
                if light_sample.pdf_area <= flt_eps{
                    return(ShadowRay::None)
                }
                let light_dir = vec3_sub(light_sample.posdir, surf.point);
                let light_dist = vec3_len(light_dir);
                let light_dist2 = light_dist * light_dist;
                let wi = vec3_mulf(light_dir, 1/light_dist);
                let wo = vec3_neg(ray.dir);

                let vis = vec3_dot(light_dir, surf.local.col(2));
                // if vis > flt_eps && light_sample.cos > flt_eps && pt.depth == 2{
                if vis > flt_eps && light_sample.cos > flt_eps {
                    let cos_l = light_sample.cos;
                    let pdf_area = light_sample.pdf_area;
                    //TODO can we use cos_l here???
                    let pdf_dirpos = pdf_area * light_dist2 / (cos_l);

                    let light_beta = color_mulf(light_sample.intensity, 1/(pdf_dirpos * light_pdf));
                    let f = mat.bsdf.eval(wi, wo); //Ich gehe davon aus das hier auch schon Cos drinnen ist?
                    let contri = color_mul(color_mul(light_beta, pt.contrib), f);
                    // if(pixel == 468613){
                    //     print_string("\n");
                    //     print_f32(1/pdf_dirpos);
                    //     print_string("\n");
                    //     print_f32(light_sample.pdf_area);
                    //     print_string("\n");
                    //     print_f32(pdf_lightpick);
                    //     print_string("\n");
                    //     print_f32(cos_l);
                    //     print_string("\n");
                    //     print_f32(1/light_dist2);
                    //     print_string("\n");
                    // }
                    return(make_simple_shadow_ray(
                        make_ray(surf.point, light_dir, offset, 1 - offset),
                        contri
                    ))
                }else{
                    return(ShadowRay::None)
                }
            }
        }else if s > 1{
            let camera_pos = surf.point;
            let camera_wo = vec3_neg(ray.dir);
            let camera_beta = pt.contrib;

            let light_buf_pos_corrected = light_buf_pos + 16 * (s - 1);
            //The current size of one data point is 16 bytes (valid: i32 (0, 1): 0, material: i32: 1, pdfFwd: f32 : 2, pdfRev: f32: 3, pos: vec3 : 4, normal: vec3 : 7, beta: vec3 : 10, wo: vec3 : 13)
            let light_pos = buf.load_vec3(light_buf_pos_corrected + 4);
            let light_normal = buf.load_vec3(light_buf_pos_corrected + 7);
            let light_beta = vec3_to_color(buf.load_vec3(light_buf_pos_corrected + 10));
            let light_wi = buf.load_vec3(light_buf_pos_corrected + 13);

            let light_dir = vec3_sub(light_pos, camera_pos);
            let light_dist = vec3_len(light_dir);
            let light_dist2 = light_dist * light_dist;

            let camera_wi = vec3_mulf(light_dir, 1/light_dist);
            let light_wo = vec3_neg(camera_wi);
            
            let vis_camera = vec3_dot(camera_wi, surf.face_normal);
            let vis_camera2 = vec3_dot(camera_wo, surf.face_normal);
            let vis_light = vec3_dot(light_wo, light_normal);
            let vis_light2 = vec3_dot(light_wi, light_normal);
            // if vis_camera > flt_eps && vis_camera2 > flt_eps && vis_light > flt_eps && vis_light2 > flt_eps && pt.depth == 1{
            if vis_camera > flt_eps && vis_camera2 > flt_eps && vis_light > flt_eps && vis_light2 > flt_eps{ 
                let light_surf = SurfaceElement{
                    is_entering = true,
                    point = light_pos,
                    face_normal = light_normal,
                    inv_area = 1, //TODO this is wrong but should not matter 
                    prim_coords = make_vec2(0,0),
                    tex_coords = make_vec2(0,0),
                    local = make_orthonormal_mat3x3(light_normal)
                };

                let light_mat = make_diffuse_bsdf(light_surf, make_color(1,1,1,1));

                let geom_factor = 1 / light_dist2; //the two cos factors should be in in the two bsdf calculations
                let camera_bsdf = mat.bsdf.eval(camera_wi, camera_wo);

                let light_bsdf = light_mat.eval(light_wo, light_wi); 
                let conection = color_mulf(color_mul(camera_bsdf, light_bsdf), geom_factor);
                let contri = color_mul(color_mul(conection, camera_beta), light_beta);
            
                // if(pixel == 234551){
                //     print_string("Camera");
                //     print_string("\n");
                //     print_f32(light_dist);
                //     print_string("\n");
                //     print_f32(geom_factor);
                //     print_string("\n");
                //     print_f32(light_bsdf.r);print_string(",");print_f32(light_bsdf.g);print_string(",");print_f32(light_bsdf.b);print_string(",");
                //     print_string("\n");
                //     print_f32(conection.r);print_string(",");print_f32(conection.g);print_string(",");print_f32(conection.b);print_string(",");
                //     print_string("\n");
                //     print_f32(light_pos.x);print_string(",");print_f32(light_pos.y);print_string(",");print_f32(light_pos.z);print_string(",");
                //     print_string("\n");
                //     print_f32(surf.point.x);print_string(",");print_f32(surf.point.y);print_string(",");print_f32(surf.point.z);print_string(",");
                //     print_string("\n");
                //     print_f32(light_normal.x);print_string(",");print_f32(light_normal.y);;print_string(",");print_f32(light_normal.z);;print_string(",");
                //     print_string("\n");
                //     print_f32(surf.face_normal.x);print_string(",");print_f32(surf.face_normal.y);;print_string(",");print_f32(surf.face_normal.z);;print_string(",");
                //     print_string("\n");
                //     print_f32(light_beta.r);print_string(",");print_f32(light_beta.g);print_string(",");print_f32(light_beta.b);print_string(",");
                //     print_string("\n");
                //     print_f32(light_wi.x);print_string(",");print_f32(light_wi.y);print_string(",");print_f32(light_wi.z);print_string(",");
                //     print_string("\n");
                //     print_f32(light_wo.x);print_string(",");print_f32(light_wo.y);print_string(",");print_f32(light_wo.z);print_string(",");
                //     print_string("\n");
                //     print_f32(contri.r);print_string(",");print_f32(contri.g);print_string(",");print_f32(contri.b);print_string(",");
                //     print_string("\n");
                //     print_flush();
                // }

                //return(Option[(Ray, Color)]::None)
                return(make_simple_shadow_ray(
                    make_ray(surf.point, light_dir, offset, 1 - offset),
                    contri
                ))
            }else{
                ShadowRay::None
            }
        }else{
            ShadowRay::None
        }
    }

    fn @on_hit( ray: Ray
              , pixel: i32
              , hit: Hit
              , payload: RayPayload
              , surf: SurfaceElement
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_ptraypayload(payload);
        // if pt.depth == 1 {
        //     aov_normal.splat(pixel, make_color(math_builtins::fabs(surf.local.col(2).x),
        //                                        math_builtins::fabs(surf.local.col(2).y),
        //                                        math_builtins::fabs(surf.local.col(2).z),
        //                                        1));
        // }

        // Hits on a light source
        if mat.is_emissive && surf.is_entering {
            let out_dir = vec3_neg(ray.dir);
            let dot     = vec3_dot(out_dir, surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions
                let emit     = mat.emission(out_dir);
                // let next_mis = pt.mis * hit.distance * hit.distance / dot;
                // let mis      = 1 / (1 + next_mis * pdf_lightpick * emit.pdf_area);
                // let contrib  = color_mulf(color_mul(pt.contrib, emit.intensity), mis);
                
                // //aov_di.splat(pixel, contrib);
                let contrib = color_mul(pt.contrib, emit.intensity);
                //return(make_option(contrib))
                return(Option[Color]::None)
            }
        }
        Option[Color]::None
    }

    fn @on_miss( ray: Ray
               , pixel: i32
               , payload: RayPayload) -> Option[Color] {
        // let mut inflights = 0;
        // let mut color     = black;

        // // Due to the renderer design, this will only iterate through
        // // infinite lights, as a miss shader does not contain area lights
        // for light_id in unroll(0, num_lights) {
        //     let light = @lights(light_id);
        //     // Do not include delta lights or finite lights
        //     if light.infinite && !light.delta {
        //         let pt = unrap_ptraypayload(payload);

        //         inflights += 1;

        //         let out_dir = vec3_neg(ray.dir);
        //         let emit    = light.emission(out_dir, make_invalid_surface_element());
        //         let mis     = 1 / (1 + pt.mis * pdf_lightpick * emit.pdf_dir);
        //         color = color_add(color, color_mulf(color_mul(pt.contrib, emit.intensity), mis));
        //     }
        // }

        // if inflights > 0 {
        //     aov_di.splat(pixel, color);
        //     make_option(color)
        // } else {
        //     Option[Color]::None
        // }
        Option[Color]::None
    }

    fn @on_bounce( ray: Ray
                 , pixel: i32
                 , _hit: Hit
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , surf: SurfaceElement
                 , mat: Material
                 ) -> Option[(Ray, RayPayload)] {
        let pt = unwrap_ptraypayload(payload);
        
        if pt.depth + 1 > max_path_len {
            return(Option[(Ray, RayPayload)]::None)
        }

        if pt.depth >= max_path_len {
            return(Option[(Ray, RayPayload)]::None)
        }
        // aov_stats.splat(pixel, make_color(if pt.depth == 1 { 2 } else { 1 }, 0, 0));
        // Bounce
        let wo = vec3_neg(ray.dir);
        let buf_pos = 16 * pixel * max_path_len;

        if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, wo, false) {
            let beta = pt.contrib;
            let pdfFwd = pt.mis;
            
            // let rr_prob = russian_roulette_pbrt(color_mulf(pt.contrib, pt.eta * pt.eta), 0.95);
            // if pt.depth + 1 > max_path_len || randf(rnd) >= rr_prob {
            //     return(Option[(Ray, RayPayload)]::None)
            // }
            
            let current_buf_pos = buf_pos + pt.depth * 16;
            let prev_buf_pos = buf_pos + (pt.depth - 1) * 16;
            // let contrib     = color_mul(pt.contrib, mat_sample.color/* Pdf and cosine are already applied!*/);
            // let mis         = if mat.bsdf.is_specular { 0 } else { 1 / mat_sample.pdf };
            // let new_contrib = color_mulf(contrib, 1 / rr_prob);

            let current_pos = surf.point;
            let current_normal = surf.face_normal;
            
            let mut correctedFwdPDF : f32 = 0.0;
            let mut correctedRevPDF : f32 = 0.0;
            
            let prev_pos        = buf.load_vec3(prev_buf_pos + 4);
            let prev_normal     = buf.load_vec3(prev_buf_pos + 7); 
            
            let pdfRev = mat.bsdf.pdf(mat_sample.in_dir, wo); //this could be wrong!!!!

            //TODO this seems to be a wrong way of handeling this problem
            if(pt.depth != 1){
                let prev_pos = camera_buf.load_vec3(prev_buf_pos + 4);
                correctedFwdPDF = convertDensity(prev_pos, current_pos, current_normal, pdfFwd);
                correctedRevPDF = convertDensity(current_pos, prev_pos, prev_normal, pdfRev);
            }

            camera_buf.store_f32(prev_buf_pos + 3, correctedRevPDF);
            //The current size of one data point is 16 bytes (valid: i32 (0, 1): 0, material: i32: 1, pdfFwd: f32 : 2, pdfRev: f32: 3, pos: vec3 : 4, normal: vec3 : 7, beta: vec3 : 10, wo: vec3 : 13)
            camera_buf.store_int2(current_buf_pos, 1, -1);
            camera_buf.store_f32(current_buf_pos + 2, correctedFwdPDF);
            camera_buf.store_f32(current_buf_pos + 3, 0.0);
            camera_buf.store_vec3(current_buf_pos + 4, current_pos);
            camera_buf.store_vec3(current_buf_pos + 7, current_normal);
            camera_buf.store_vec3(current_buf_pos + 10, color_to_vec3(beta));
            camera_buf.store_vec3(current_buf_pos + 13, wo);

            // if(pixel == 468613){
            //     print_string("\n");
            //     print_i32(pt.depth);
            //     print_string("\n");
            //     print_f32(beta.r);
            //     print_string("\n");
            //     print_f32(mat_sample.color.r);
            //     print_string("\n");
            //     print_f32(pdfFwd);
            //     print_string("\n");
            // }

            let next_pdf = mat_sample.pdf;
            if next_pdf == 0.0{
                return(Option[(Ray, RayPayload)]::None)
            }
            let next_contri = color_mul(beta, mat_sample.color); //cos and pdf is already applied

            make_option(
                make_ray(surf.point, mat_sample.in_dir, offset, flt_max),
                wrap_ptraypayload(PTRayPayload {
                    mis     = next_pdf,
                    contrib = next_contri,
                    depth   = pt.depth + 1,
                    eta     = pt.eta * mat_sample.eta
                })
            )
        } else {
            Option[(Ray, RayPayload)]::None
        }
    }

    fn @on_shadow_miss( _ray: Ray
                      , pixel: i32
                      , color: Color) -> Option[Color] {
        aov_nee.splat(pixel, color);
        make_option(color)
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = on_shadow_miss,
    }
}
